Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var stage = _U.list([_U.list([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
                       ,_U.list([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
                       ,_U.list([0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0])
                       ,_U.list([0,0,2,0,0,0,0,2,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,0,0,0,0,2,0,0])
                       ,_U.list([0,0,3,0,0,0,0,2,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,0,0,0,0,3,0,0])
                       ,_U.list([0,0,2,0,0,0,0,2,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,0,0,0,0,2,0,0])
                       ,_U.list([0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0])
                       ,_U.list([0,0,2,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0])
                       ,_U.list([0,0,2,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,2,0,0])
                       ,_U.list([0,0,2,2,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,2,2,0,0])
                       ,_U.list([0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0])
                       ,_U.list([0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,1,0,0,0,0,0,2,0,0,0,0,0,0,0])
                       ,_U.list([0,0,0,0,0,0,0,2,0,0,1,1,1,1,1,1,1,1,1,1,0,0,2,0,0,0,0,0,0,0])
                       ,_U.list([0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0])
                       ,_U.list([0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0])
                       ,_U.list([1,1,1,1,1,1,1,2,1,1,1,0,0,0,0,0,0,0,0,1,1,1,2,1,1,1,1,1,1,1])
                       ,_U.list([0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0])
                       ,_U.list([0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0])
                       ,_U.list([0,0,0,0,0,0,0,2,0,0,1,1,1,1,1,1,1,1,1,1,0,0,2,0,0,0,0,0,0,0])
                       ,_U.list([0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0])
                       ,_U.list([0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0])
                       ,_U.list([0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0])
                       ,_U.list([0,0,2,0,0,0,0,2,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,0,0,0,0,2,0,0])
                       ,_U.list([0,0,2,0,0,0,0,2,0,0,0,0,0,2,0,0,2,0,0,0,0,0,2,0,0,0,0,2,0,0])
                       ,_U.list([0,0,3,2,2,0,0,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,0,0,2,2,3,0,0])
                       ,_U.list([0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0])
                       ,_U.list([0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0])
                       ,_U.list([0,0,2,2,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,0,0,2,2,2,2,2,2,0,0])
                       ,_U.list([0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0])
                       ,_U.list([0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0])
                       ,_U.list([0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0])
                       ,_U.list([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
                       ,_U.list([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])]);
   var draw = function (model) {
      return _U.list([A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: $Basics.toFloat(model.x),_1: $Basics.toFloat(model.y)},
      A2($Graphics$Collage.filled,model.color,$Graphics$Collage.circle(9)))]);
   };
   var makeblock = F2(function (pos,n) {
      var _p0 = {ctor: "_Tuple2",_0: A2($Basics._op["%"],pos,30) * 20 - 290,_1: 320 - (pos / 30 | 0) * 20};
      var x = _p0._0;
      var y = _p0._1;
      return _U.eq(n,0) ? _U.list([A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: $Basics.toFloat(x),_1: $Basics.toFloat(y)},
      A2($Graphics$Collage.filled,$Color.blue,A2($Graphics$Collage.rect,20,20)))]) : _U.eq(n,1) ? _U.list([A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: $Basics.toFloat(x),_1: $Basics.toFloat(y)},
      A2($Graphics$Collage.filled,$Color.black,A2($Graphics$Collage.rect,20,20)))]) : _U.eq(n,2) ? _U.list([A2($Graphics$Collage.move,
                                                                                                           {ctor: "_Tuple2"
                                                                                                           ,_0: $Basics.toFloat(x)
                                                                                                           ,_1: $Basics.toFloat(y)},
                                                                                                           A2($Graphics$Collage.filled,
                                                                                                           $Color.black,
                                                                                                           A2($Graphics$Collage.rect,20,20)))
                                                                                                           ,A2($Graphics$Collage.move,
                                                                                                           {ctor: "_Tuple2"
                                                                                                           ,_0: $Basics.toFloat(x)
                                                                                                           ,_1: $Basics.toFloat(y)},
                                                                                                           A2($Graphics$Collage.filled,
                                                                                                           $Color.yellow,
                                                                                                           $Graphics$Collage.circle(2)))]) : _U.list([A2($Graphics$Collage.move,
                                                                                                                                                     {ctor: "_Tuple2"
                                                                                                                                                     ,_0: $Basics.toFloat(x)
                                                                                                                                                     ,_1: $Basics.toFloat(y)},
                                                                                                                                                     A2($Graphics$Collage.filled,
                                                                                                                                                     $Color.black,
                                                                                                                                                     A2($Graphics$Collage.rect,
                                                                                                                                                     20,
                                                                                                                                                     20)))
                                                                                                                                                     ,A2($Graphics$Collage.move,
                                                                                                                                                     {ctor: "_Tuple2"
                                                                                                                                                     ,_0: $Basics.toFloat(x)
                                                                                                                                                     ,_1: $Basics.toFloat(y)},
                                                                                                                                                     A2($Graphics$Collage.filled,
                                                                                                                                                     $Color.yellow,
                                                                                                                                                     $Graphics$Collage.circle(5)))]);
   });
   var makestage = function (stage) {    return $List.concat(A3($List.map2,makeblock,_U.range(0,999),$List.concat(stage)));};
   var txt = F3(function (f,color,string) {    return $Graphics$Element.leftAligned(f($Text.monospace(A2($Text.color,color,$Text.fromString(string)))));});
   var correction = F2(function (nomalTime,enemy) {
      var _p1 = {ctor: "_Tuple2",_0: enemy.x,_1: enemy.y};
      var x = _p1._0;
      var y = _p1._1;
      return nomalTime ? _U.update(enemy,{x: (x / 5 | 0) * 5,y: (y / 5 | 0) * 5}) : enemy;
   });
   var physics = F2(function (dt,pacman) {
      return _U.update(pacman,{x: pacman.x + $Basics.round(pacman.vx) * dt,y: pacman.y + $Basics.round(pacman.vy) * dt});
   });
   var warp = function (pacman) {
      var add = _U.cmp(pacman.x,300) > 0 ? -620 : _U.cmp(pacman.x,-320) < 0 ? 630 : 0;
      return _U.update(pacman,{x: pacman.x + add});
   };
   var hitEnemy = F2(function (pacman,enemy) {    return _U.cmp($Basics.abs(pacman.x - enemy.x),15) < 0 && _U.cmp($Basics.abs(pacman.y - enemy.y),15) < 0;});
   var hitEnemies = function (_p2) {
      var _p3 = _p2;
      var range = 15;
      return A3($List.foldr,F2(function (x,y) {    return x || y;}),false,A2($List.map,hitEnemy(_p3.pacman),_p3.enemies));
   };
   var allEat = function (stage) {
      return $Basics.not(A3($List.foldr,
      F2(function (x,y) {    return x || y;}),
      false,
      $List.concat(_U.list([A2($List.map,$List.member(2),stage),A2($List.map,$List.member(3),stage)]))));
   };
   var set = F3(function (n,elem,list) {    return $Array.toList(A3($Array.set,n,elem,$Array.fromList(list)));});
   var get = F3(function (n,$default,list) {    return A2($Maybe.withDefault,$default,A2($Array.get,n,$Array.fromList(list)));});
   var toStage = F2(function (_p4,stage) {
      var _p5 = _p4;
      var _p6 = {ctor: "_Tuple2",_0: (_p5._0 + 300) / 20 | 0,_1: (0 - _p5._1 + 330) / 20 | 0};
      var x$ = _p6._0;
      var y$ = _p6._1;
      return A3(get,x$,1,A3(get,y$,_U.list([]),stage));
   });
   var eatFood = F3(function (_p8,_p7,status) {
      var _p9 = _p8;
      var _p10 = _p7;
      var _p12 = _p10._0;
      var _p11 = {ctor: "_Tuple2",_0: (_p9._0 + 300) / 20 | 0,_1: (0 - _p9._1 + 330) / 20 | 0};
      var x$ = _p11._0;
      var y$ = _p11._1;
      var new_row = A3(set,x$,1,A3(get,y$,_U.list([]),_p12));
      var bigfood = _U.eq(status,3);
      return {ctor: "_Tuple3",_0: A3(set,y$,new_row,_p12),_1: _p10._1 + (_U.eq(status,2) ? 10 : 50),_2: bigfood};
   });
   var eat = F2(function (pacman,_p13) {
      var _p14 = _p13;
      var _p17 = _p14._0;
      var _p16 = _p14._1;
      var _p15 = {ctor: "_Tuple2",_0: pacman.x,_1: pacman.y};
      var x = _p15._0;
      var y = _p15._1;
      var status = A2(toStage,{ctor: "_Tuple2",_0: x,_1: y},_p17);
      return _U.eq(status,2) || _U.eq(status,3) ? A3(eatFood,{ctor: "_Tuple2",_0: x,_1: y},{ctor: "_Tuple2",_0: _p17,_1: _p16},status) : {ctor: "_Tuple3"
                                                                                                                                         ,_0: _p17
                                                                                                                                         ,_1: _p16
                                                                                                                                         ,_2: false};
   });
   var updateStageandScore = F2(function (_p18,pacman) {    var _p19 = _p18;return A2(eat,pacman,{ctor: "_Tuple2",_0: _p19._0,_1: _p19._1});});
   var Inputs = F2(function (a,b) {    return {input: a,ps: b};});
   var Input = F3(function (a,b,c) {    return {keys: a,space: b,time: c};});
   var input = function () {
      var time = $Time.fps(30);
      var space = $Keyboard.space;
      var keys = $Keyboard.arrows;
      return A2($Signal.sampleOn,time,A4($Signal.map3,Input,keys,space,time));
   }();
   var Keys = F2(function (a,b) {    return {x: a,y: b};});
   var GameOver = {ctor: "GameOver"};
   var Clear = {ctor: "Clear"};
   var view = F2(function (_p20,game) {
      var _p21 = _p20;
      var score = A3(txt,$Text.height(30),$Color.green,A2($Basics._op["++"],"SCORE  ",$Basics.toString(game.score)));
      if (_U.eq(game.state,Clear)) {
            var endText = A3(txt,$Text.height(20),$Color.white,"CREAR");
            return A3($Graphics$Collage.collage,
            600,
            660,
            $List.concat(_U.list([makestage(game.stage)
                                 ,_U.list([A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: -190,_1: -310},$Graphics$Collage.toForm(score))
                                          ,A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: 0,_1: -70},$Graphics$Collage.toForm(endText))])])));
         } else if (_U.eq(game.state,GameOver)) {
               var endText = A3(txt,$Text.height(20),$Color.white,"GAME OVER");
               return A3($Graphics$Collage.collage,
               600,
               660,
               $List.concat(_U.list([makestage(game.stage)
                                    ,_U.list([A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: -190,_1: -310},$Graphics$Collage.toForm(score))
                                             ,A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: 0,_1: -70},$Graphics$Collage.toForm(endText))])])));
            } else return A3($Graphics$Collage.collage,
            600,
            660,
            $List.concat(A2($Basics._op["++"],
            _U.list([makestage(game.stage)
                    ,draw(game.pacman)
                    ,_U.list([A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: -190,_1: -310},$Graphics$Collage.toForm(score))])]),
            A2($List.map,draw,game.enemies))));
   });
   var Play = {ctor: "Play"};
   var Down = {ctor: "Down"};
   var pacman = {x: 10,y: -160,vx: 0,vy: 0,next: Down,color: $Color.yellow};
   var Up = {ctor: "Up"};
   var Right = {ctor: "Right"};
   var Left = {ctor: "Left"};
   var enemy1 = {x: 10,y: 80,vx: 0,vy: -1,next: Left,color: $Color.lightRed};
   var enemy2 = {x: 10,y: 80,vx: 0,vy: -1,next: Left,color: $Color.lightGreen};
   var enemy3 = {x: 10,y: 80,vx: 0,vy: -1,next: Left,color: $Color.lightBlue};
   var enemy4 = {x: 10,y: 80,vx: 0,vy: -1,next: Left,color: $Color.lightPurple};
   var game = {pacman: pacman,enemies: _U.list([enemy1,enemy2,enemy3,enemy4]),stage: stage,score: 0,state: Play,timeLimit: 0};
   var successable = F3(function (_p22,next,stage) {
      var _p23 = _p22;
      var _p25 = _p23._1;
      var _p24 = _p23._0;
      return _U.eq(next,Up) && (!_U.eq(A2(toStage,{ctor: "_Tuple2",_0: _p24 + 9,_1: _p25 + 11},stage),0) && !_U.eq(A2(toStage,
      {ctor: "_Tuple2",_0: _p24 - 9,_1: _p25 + 11},
      stage),
      0)) || (_U.eq(next,Down) && (!_U.eq(A2(toStage,{ctor: "_Tuple2",_0: _p24 + 9,_1: _p25 - 11},stage),0) && !_U.eq(A2(toStage,
      {ctor: "_Tuple2",_0: _p24 - 9,_1: _p25 - 11},
      stage),
      0)) || (_U.eq(next,Right) && (!_U.eq(A2(toStage,{ctor: "_Tuple2",_0: _p24 + 11,_1: _p25 + 9},stage),0) && !_U.eq(A2(toStage,
      {ctor: "_Tuple2",_0: _p24 + 11,_1: _p25 - 9},
      stage),
      0)) || _U.eq(next,Left) && (!_U.eq(A2(toStage,{ctor: "_Tuple2",_0: _p24 - 11,_1: _p25 + 9},stage),0) && !_U.eq(A2(toStage,
      {ctor: "_Tuple2",_0: _p24 - 11,_1: _p25 - 9},
      stage),
      0))));
   });
   var vec = F3(function (pacman,stage,enemy) {
      var _p26 = $Basics.toPolar({ctor: "_Tuple2",_0: $Basics.toFloat(pacman.x - enemy.x),_1: $Basics.toFloat(pacman.y - enemy.y)});
      var r = _p26._0;
      var theta = _p26._1;
      return _U.cmp(theta,(0 - $Basics.pi) * 3 / 4) < 1 ? $Array.fromList(_U.list([Left,Down,Up,Right])) : _U.cmp(theta,
      (0 - $Basics.pi) / 2) < 1 ? $Array.fromList(_U.list([Down,Left,Right,Up])) : _U.cmp(theta,(0 - $Basics.pi) / 4) < 1 ? $Array.fromList(_U.list([Down
                                                                                                                                                    ,Right
                                                                                                                                                    ,Left
                                                                                                                                                    ,Up])) : _U.cmp(theta,
      0) < 1 ? $Array.fromList(_U.list([Right,Down,Up,Left])) : _U.cmp(theta,$Basics.pi / 4) < 1 ? $Array.fromList(_U.list([Right
                                                                                                                           ,Up
                                                                                                                           ,Down
                                                                                                                           ,Left])) : _U.cmp(theta,
      $Basics.pi / 2) < 1 ? $Array.fromList(_U.list([Up,Right,Left,Down])) : _U.cmp(theta,$Basics.pi * 3 / 4) < 1 ? $Array.fromList(_U.list([Up
                                                                                                                                            ,Left
                                                                                                                                            ,Right
                                                                                                                                            ,Down])) : $Array.fromList(_U.list([Left
                                                                                                                                                                               ,Up
                                                                                                                                                                               ,Down
                                                                                                                                                                               ,Right]));
   });
   var setNext = F2(function (keys,pacman) {
      return _U.update(pacman,{next: _U.eq(keys.x,1) ? Right : _U.eq(keys.x,-1) ? Left : _U.eq(keys.y,1) ? Up : _U.eq(keys.y,-1) ? Down : pacman.next});
   });
   var curve = F2(function (stage,pacman) {
      var _p27 = {ctor: "_Tuple2",_0: pacman.x,_1: pacman.y};
      var x = _p27._0;
      var y = _p27._1;
      return _U.eq(pacman.next,Right) && A3(successable,{ctor: "_Tuple2",_0: x,_1: y},Right,stage) ? _U.update(pacman,{vx: 1,vy: 0}) : _U.eq(pacman.next,
      Left) && A3(successable,{ctor: "_Tuple2",_0: x,_1: y},Left,stage) ? _U.update(pacman,{vx: -1,vy: 0}) : _U.eq(pacman.next,Up) && A3(successable,
      {ctor: "_Tuple2",_0: x,_1: y},
      Up,
      stage) ? _U.update(pacman,{vx: 0,vy: 1}) : _U.eq(pacman.next,Down) && A3(successable,{ctor: "_Tuple2",_0: x,_1: y},Down,stage) ? _U.update(pacman,
      {vx: 0,vy: -1}) : _U.cmp(pacman.vx,0) > 0 && $Basics.not(A3(successable,{ctor: "_Tuple2",_0: x + 1,_1: y},Right,stage)) || (_U.cmp(pacman.vx,
      0) < 0 && $Basics.not(A3(successable,{ctor: "_Tuple2",_0: x - 1,_1: y},Left,stage)) || (_U.cmp(pacman.vy,0) > 0 && $Basics.not(A3(successable,
      {ctor: "_Tuple2",_0: x,_1: y + 1},
      Up,
      stage)) || _U.cmp(pacman.vy,0) < 0 && $Basics.not(A3(successable,{ctor: "_Tuple2",_0: x,_1: y - 1},Down,stage)))) ? _U.update(pacman,
      {vx: 0,vy: 0}) : pacman;
   });
   var updatePacman = F3(function (stage,_p28,pacman) {    var _p29 = _p28;return A2(physics,5,warp(A2(curve,stage,A2(setNext,_p29.keys,pacman))));});
   var inputs = function (input) {
      var newP = A3($Signal.foldp,updatePacman(stage),pacman,input);
      var delay = $Time.delay(1000);
      var delayP1 = delay(newP);
      var delayP2 = delay(delayP1);
      var delayP3 = delay(delayP2);
      var pacmans = A5($Signal.map4,F4(function (p1,p2,p3,p4) {    return _U.list([p1,p2,p3,p4]);}),newP,delayP1,delayP2,delayP3);
      return A2($Signal.sampleOn,$Time.fps(30),A3($Signal.map2,Inputs,input,pacmans));
   };
   var setDirection = function (enemy) {
      var dir = _U.cmp(enemy.vx,0) > 0 ? Right : _U.cmp(enemy.vx,0) < 0 ? Left : _U.cmp(enemy.vy,0) > 0 ? Up : Down;
      return _U.update(enemy,{next: dir});
   };
   var curveEnemy = F4(function (pacman,stage,nomalTime,enemy) {
      var _p30 = {ctor: "_Tuple2",_0: enemy.x,_1: enemy.y};
      var x = _p30._0;
      var y = _p30._1;
      if (!_U.eq(enemy.vx,0) && (A3(successable,{ctor: "_Tuple2",_0: x,_1: y},Down,stage) || A3(successable,
      {ctor: "_Tuple2",_0: x,_1: y},
      Up,
      stage)) || !_U.eq(enemy.vy,0) && (A3(successable,{ctor: "_Tuple2",_0: x,_1: y},Right,stage) || A3(successable,{ctor: "_Tuple2",_0: x,_1: y},Left,stage)))
      {
            var vect = nomalTime ? A3(vec,pacman,stage,enemy) : A3(vec,enemy,stage,pacman);
            var newNext = A3(successable,
            {ctor: "_Tuple2",_0: enemy.x,_1: enemy.y},
            A2($Maybe.withDefault,Down,A2($Array.get,0,vect)),
            stage) ? A2($Maybe.withDefault,Down,A2($Array.get,0,vect)) : A3(successable,
            {ctor: "_Tuple2",_0: enemy.x,_1: enemy.y},
            A2($Maybe.withDefault,Down,A2($Array.get,1,vect)),
            stage) ? A2($Maybe.withDefault,Down,A2($Array.get,1,vect)) : A3(successable,
            {ctor: "_Tuple2",_0: enemy.x,_1: enemy.y},
            A2($Maybe.withDefault,Down,A2($Array.get,2,vect)),
            stage) ? A2($Maybe.withDefault,Down,A2($Array.get,2,vect)) : A2($Maybe.withDefault,Down,A2($Array.get,3,vect));
            var _p31 = _U.eq(newNext,Left) ? {ctor: "_Tuple2",_0: -1,_1: 0} : _U.eq(newNext,Right) ? {ctor: "_Tuple2",_0: 1,_1: 0} : _U.eq(newNext,
            Up) ? {ctor: "_Tuple2",_0: 0,_1: 1} : {ctor: "_Tuple2",_0: 0,_1: -1};
            var vx = _p31._0;
            var vy = _p31._1;
            return _U.update(enemy,{next: newNext,vx: vx,vy: vy});
         } else return enemy;
   });
   var updateEnemy = F4(function (enemy,stage,pacman,nomalTime) {
      return A2(correction,nomalTime,A2(physics,nomalTime ? 5 : 2,warp(A4(curveEnemy,pacman,stage,nomalTime,setDirection(enemy)))));
   });
   var updateGame = F2(function (_p32,game) {
      var _p33 = _p32;
      var _p35 = _p33.ps;
      var nomalTime = _U.cmp(game.timeLimit,0) < 1;
      var p1 = A2($Maybe.withDefault,pacman,$List.head(_p35));
      var nextEnemy = F2(function (enemy,p) {
         return $Basics.not(A2(hitEnemy,p1,enemy)) ? A4(updateEnemy,enemy,game.stage,p,nomalTime) : _U.update(enemy,{x: 10,y: 80,vx: 0,vy: -1,next: Left});
      });
      if (allEat(game.stage) || _U.eq(game.state,Clear)) return _U.update(game,{state: Clear}); else if (hitEnemies(_U.update(game,
         {pacman: p1})) && nomalTime || _U.eq(game.state,GameOver)) return _U.update(game,{state: GameOver}); else {
               var weakColor = $Color.darkBlue;
               var newState = Play;
               var addScore = $Basics.not(nomalTime) && hitEnemies(_U.update(game,{pacman: p1})) ? 200 : 0;
               var _p34 = A2(updateStageandScore,{ctor: "_Tuple2",_0: game.stage,_1: game.score},p1);
               var newStage = _p34._0;
               var newScore = _p34._1;
               var bigfood = _p34._2;
               var newTimeLimit = bigfood ? 10000 : $Basics.not(nomalTime) ? game.timeLimit - _p33.input.time : 0;
               var newEnemies = A3($List.map2,nextEnemy,game.enemies,_p35);
               return _U.update(game,
               {pacman: p1
               ,enemies: A3($List.map2,
               F2(function (e,c) {    return _U.update(e,{color: nomalTime ? c : weakColor});}),
               newEnemies,
               _U.list([$Color.lightRed,$Color.lightGreen,$Color.lightBlue,$Color.lightPurple]))
               ,stage: newStage
               ,score: newScore + addScore
               ,state: newState
               ,timeLimit: newTimeLimit});
            }
   });
   var gameState = A3($Signal.foldp,updateGame,game,inputs(input));
   var main = A3($Signal.map2,view,$Window.dimensions,gameState);
   var Game = F6(function (a,b,c,d,e,f) {    return {pacman: a,enemies: b,stage: c,score: d,state: e,timeLimit: f};});
   var Model = F6(function (a,b,c,d,e,f) {    return {x: a,y: b,vx: c,vy: d,next: e,color: f};});
   return _elm.Main.values = {_op: _op
                             ,Model: Model
                             ,Game: Game
                             ,Left: Left
                             ,Right: Right
                             ,Up: Up
                             ,Down: Down
                             ,Play: Play
                             ,Clear: Clear
                             ,GameOver: GameOver
                             ,Keys: Keys
                             ,Input: Input
                             ,Inputs: Inputs
                             ,pacman: pacman
                             ,enemy1: enemy1
                             ,enemy2: enemy2
                             ,enemy3: enemy3
                             ,enemy4: enemy4
                             ,game: game
                             ,get: get
                             ,set: set
                             ,toStage: toStage
                             ,successable: successable
                             ,eatFood: eatFood
                             ,allEat: allEat
                             ,hitEnemies: hitEnemies
                             ,hitEnemy: hitEnemy
                             ,vec: vec
                             ,updateGame: updateGame
                             ,updatePacman: updatePacman
                             ,setNext: setNext
                             ,warp: warp
                             ,curve: curve
                             ,physics: physics
                             ,updateEnemy: updateEnemy
                             ,setDirection: setDirection
                             ,curveEnemy: curveEnemy
                             ,correction: correction
                             ,updateStageandScore: updateStageandScore
                             ,eat: eat
                             ,view: view
                             ,txt: txt
                             ,makestage: makestage
                             ,makeblock: makeblock
                             ,draw: draw
                             ,stage: stage
                             ,main: main
                             ,gameState: gameState
                             ,inputs: inputs
                             ,input: input};
};